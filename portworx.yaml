---
apiVersion: v1
data:
  policy.cfg: |-
    {
      "kind": "Policy",
      "apiVersion": "v1",
      "predicates": [
        {"name": "MaxAzureDiskVolumeCount"},
        {"name": "NoVolumeZoneConflict"},
        {"name": "PodToleratesNodeTaints"},
        {"name": "CheckNodeMemoryPressure"},
        {"name": "MaxEBSVolumeCount"},
        {"name": "MaxGCEPDVolumeCount"},
        {"name": "MatchInterPodAffinity"},
        {"name": "NoDiskConflict"},
        {"name": "GeneralPredicates"},
        {"name": "CheckNodeDiskPressure"}
      ],
      "priorities": [
        {"name": "NodeAffinityPriority", "weight": 1},
        {"name": "TaintTolerationPriority", "weight": 1},
        {"name": "SelectorSpreadPriority", "weight": 1},
        {"name": "InterPodAffinityPriority", "weight": 1},
        {"name": "LeastRequestedPriority", "weight": 1},
        {"name": "BalancedResourceAllocation", "weight": 1},
        {"name": "NodePreferAvoidPodsPriority", "weight": 1}
      ],
      "extenders": [
        {
          "urlPrefix": "http://stork-service.kube-system.svc.cluster.local:8099",
          "apiVersion": "v1beta1",
          "filterVerb": "filter",
          "prioritizeVerb": "prioritize",
          "weight": 5,
          "enableHttps": false,
          "nodeCacheCapable": false
        }
      ]
    }
kind: ConfigMap
metadata:
  name: stork-config
  namespace: kube-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: stork-account
  namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: stork-role
  namespace: portworx
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  verbs:
  - get
  - list
  - delete
  - create
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - get
  - list
  - watch
  - create
  - delete
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - list
  - watch
  - create
  - update
  - patch
- apiGroups:
  - stork.libopenstorage.org
  resources:
  - rules
  verbs:
  - get
  - list
- apiGroups:
  - stork.libopenstorage.org
  resources:
  - migrations
  - clusterpairs
  - groupvolumesnapshots
  verbs:
  - get
  - list
  - watch
  - update
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
- apiGroups:
  - volumesnapshot.external-storage.k8s.io
  resources:
  - volumesnapshots
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - volumesnapshot.external-storage.k8s.io
  resources:
  - volumesnapshotdatas
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - create
  - update
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - '*'
  resources:
  - deployments
  - deployments/extensions
  verbs:
  - list
  - get
  - watch
  - patch
  - update
  - initialize
- apiGroups:
  - '*'
  resources:
  - statefulsets
  - statefulsets/extensions
  verbs:
  - list
  - get
  - watch
  - patch
  - update
  - initialize
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - list
  - get

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: stork-role-binding
  namespace: portworx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: stork-role
subjects:
- kind: ServiceAccount
  name: stork-account
  namespace: kube-system

---
apiVersion: v1
kind: Service
metadata:
  name: stork-service
  namespace: kube-system
spec:
  ports:
  - port: 8099
    protocol: TCP
    targetPort: 8099
  selector:
    name: stork

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ""
  labels:
    tier: control-plane
  name: stork
  namespace: kube-system
spec:
  replicas: 3
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        name: stork
        tier: control-plane
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: px/enabled
                operator: NotIn
                values:
                - "false"
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values:
                - stork
            topologyKey: kubernetes.io/hostname
      containers:
      - command:
        - /stork
        - --driver=pxd
        - --verbose
        - --leader-elect=true
        image: openstorage/stork:2.1.1
        imagePullPolicy: Always
        name: stork
        resources:
          requests:
            cpu: "0.1"
      hostPID: false
      serviceAccountName: stork-account

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: stork-snapshot-sc
  namespace: portworx
provisioner: stork-snapshot

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: stork-scheduler-account
  namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: stork-scheduler-role
  namespace: portworx
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
- apiGroups:
  - ""
  resourceNames:
  - kube-scheduler
  resources:
  - endpoints
  verbs:
  - delete
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - delete
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - bindings
  - pods/binding
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - pods/status
  verbs:
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - replicationcontrollers
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  - extensions
  resources:
  - replicasets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  - persistentvolumes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - watch

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: stork-scheduler-role-binding
  namespace: portworx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: stork-scheduler-role
subjects:
- kind: ServiceAccount
  name: stork-scheduler-account
  namespace: kube-system

---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    component: scheduler
    tier: control-plane
  name: stork-scheduler
  namespace: kube-system
spec:
  replicas: 3
  template:
    metadata:
      labels:
        component: scheduler
        tier: control-plane
      name: stork-scheduler
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: px/enabled
                operator: NotIn
                values:
                - "false"
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values:
                - stork-scheduler
            topologyKey: kubernetes.io/hostname
      containers:
      - command:
        - /usr/local/bin/kube-scheduler
        - --address=0.0.0.0
        - --leader-elect=true
        - --scheduler-name=stork
        - --policy-configmap=stork-config
        - --policy-configmap-namespace=kube-system
        - --lock-object-name=stork-scheduler
        image: gcr.io/google_containers/kube-scheduler-amd64:v1.9.0
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10251
          initialDelaySeconds: 15
        name: stork-scheduler
        readinessProbe:
          httpGet:
            path: /healthz
            port: 10251
        resources:
          requests:
            cpu: "0.1"
      hostPID: false
      serviceAccountName: stork-scheduler-account

---
apiVersion: storage.k8s.io/v1beta1
kind: StorageClass
metadata:
  name: portworx-db-sc
  namespace: portworx
parameters:
  io_profile: db
  repl: "3"
provisioner: kubernetes.io/portworx-volume

---
apiVersion: storage.k8s.io/v1beta1
kind: StorageClass
metadata:
  name: portworx-db2-sc
  namespace: portworx
parameters:
  block_size: 512b
  io_profile: db
  repl: "3"
provisioner: kubernetes.io/portworx-volume

---
apiVersion: storage.k8s.io/v1beta1
kind: StorageClass
metadata:
  name: portworx-shared-sc
  namespace: portworx
parameters:
  repl: "3"
  shared: "true"
provisioner: kubernetes.io/portworx-volume

---
apiVersion: storage.k8s.io/v1beta1
kind: StorageClass
metadata:
  annotations:
    params/aggregation_level: Specifies the number of replication sets the volume
      can be aggregated from
    params/block_size: Block size
    params/docs: https://docs.portworx.com/scheduler/kubernetes/dynamic-provisioning.html
    params/fg: This option enforces volume group policy. If a volume belonging to
      a group cannot find nodes for it's replication sets which don't have other volumes
      of same group, the volume creation will fail.
    params/fs: 'Filesystem to be laid out: none|xfs|ext4 '
    params/group: The group a volume should belong too. Portworx will restrict replication
      sets of volumes of the same group on different nodes. If the force group option
      'fg' is set to true, the volume group rule will be strictly enforced. By default,
      it's not strictly enforced.
    params/io_profile: IO Profile can be used to override the I/O algorithm Portworx
      uses for the volumes. Supported values are [db](/maintain/performance/tuning.html#db),
      [sequential](/maintain/performance/tuning.html#sequential), [random](/maintain/performance/tuning.html#random),
      [cms](/maintain/performance/tuning.html#cms)
    params/journal: Flag to indicate if you want to use journal device for the volume's
      metadata. This will use the journal device that you used when installing Portworx.
      As of PX version 1.3, it is recommended to use a journal device to absorb PX
      metadata writes
    params/label: List of comma-separated name=value pairs to apply to the Portworx
      volume
    params/nodes: Comma-separated Portworx Node ID's to use for replication sets of
      the volume
    params/priority_io: 'IO Priority: low|medium|high'
    params/repl: 'Replication factor for the volume: 1|2|3'
    params/shared: 'Flag to create a globally shared namespace volume which can be
      used by multiple pods : true|false'
    params/snap_schedule: 'Snapshot schedule. Following are the accepted formats:  periodic=_mins_,_snaps-to-keep_
      daily=_hh:mm_,_snaps-to-keep_ weekly=_weekday@hh:mm_,_snaps-to-keep_  monthly=_day@hh:mm_,_snaps-to-keep_
      _snaps-to-keep_ is optional. Periodic, Daily, Weekly and Monthly keep last 5,
      7, 5 and 12 snapshots by default respectively'
    params/sticky: Flag to create sticky volumes that cannot be deleted until the
      flag is disabled
  name: portworx-null-sc
  namespace: portworx
parameters: null
provisioner: kubernetes.io/portworx-volume

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: portworx-pvc-controller-account
  namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: portworx-pvc-controller-role
  namespace: portworx
rules:
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - create
  - delete
  - get
  - list
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumes/status
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims/status
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  verbs:
  - create
  - delete
  - get
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - create
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - create
  - update

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: portworx-pvc-controller-role-binding
  namespace: portworx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: portworx-pvc-controller-role
subjects:
- kind: ServiceAccount
  name: portworx-pvc-controller-account
  namespace: kube-system

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ""
  labels:
    tier: control-plane
  name: portworx-pvc-controller
  namespace: kube-system
spec:
  replicas: 3
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        name: portworx-pvc-controller
        tier: control-plane
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: px/enabled
                operator: NotIn
                values:
                - "false"
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values:
                - portworx-pvc-controller
            topologyKey: kubernetes.io/hostname
      containers:
      - command:
        - kube-controller-manager
        - --leader-elect=true
        - --address=0.0.0.0
        - --controllers=persistentvolume-binder
        - --use-service-account-credentials=true
        - --leader-elect-resource-lock=configmaps
        image: gcr.io/google_containers/kube-controller-manager-amd64:v1.9.0
        livenessProbe:
          failureThreshold: 8
          httpGet:
            host: 127.0.0.1
            path: /healthz
            port: 10252
            scheme: HTTP
          initialDelaySeconds: 15
          timeoutSeconds: 15
        name: portworx-pvc-controller-manager
        resources:
          requests:
            cpu: 200m
      hostNetwork: true
      serviceAccountName: portworx-pvc-controller-account

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: px-lh-account
  namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: px-lh-role
  namespace: kube-system
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - create
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - stork.libopenstorage.org
  resources:
  - clusterpairs
  - migrations
  - groupvolumesnapshots
  verbs:
  - get
  - list
  - create
  - update
  - delete

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: px-lh-role-binding
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: px-lh-role
subjects:
- kind: ServiceAccount
  name: px-lh-account
  namespace: kube-system

---
apiVersion: v1
kind: Service
metadata:
  labels:
    tier: px-web-console
  name: px-lighthouse
  namespace: kube-system
spec:
  ports:
  - name: http
    port: 80
  - name: https
    port: 443
  selector:
    tier: px-web-console
  type: NodePort

---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    tier: px-web-console
  name: px-lighthouse
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      tier: px-web-console
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        tier: px-web-console
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: px/enabled
                operator: NotIn
                values:
                - "false"
      containers:
      - args:
        - -kubernetes
        - "true"
        image: portworx/px-lighthouse:2.0.4
        imagePullPolicy: Always
        name: px-lighthouse
        ports:
        - containerPort: 80
        - containerPort: 443
        volumeMounts:
        - mountPath: /config/lh
          name: config
      - args:
        - sync
        image: portworx/lh-config-sync:0.4
        imagePullPolicy: Always
        name: config-sync
        volumeMounts:
        - mountPath: /config/lh
          name: config
      - image: portworx/lh-stork-connector:0.2
        imagePullPolicy: Always
        name: stork-connector
      initContainers:
      - args:
        - init
        image: portworx/lh-config-sync:0.4
        imagePullPolicy: Always
        name: config-init
        volumeMounts:
        - mountPath: /config/lh
          name: config
      serviceAccountName: px-lh-account
      volumes:
      - emptyDir: {}
        name: config

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: px-account
  namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: node-get-put-list-role
  namespace: portworx
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - watch
  - get
  - update
  - list
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - delete
  - get
  - list
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  - persistentvolumes
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - update
  - create
- apiGroups:
  - extensions
  resourceNames:
  - privileged
  resources:
  - podsecuritypolicies
  verbs:
  - use

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: node-role-binding
  namespace: portworx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: node-get-put-list-role
subjects:
- kind: ServiceAccount
  name: px-account
  namespace: kube-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-delete,post-delete
    helm.sh/hook-delete-policy: before-hook-creation
  labels:
    app.kubernetes.io/instance: portworx
    app.kubernetes.io/managed-by: Tiller
    chart: portworx-1.0.0
    heritage: Tiller
    release: portworx
  name: portworx-hook
  namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-delete,post-delete
    helm.sh/hook-delete-policy: before-hook-creation
  name: portworx-hook
  namespace: portworx
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - patch
  - get
  - update
  - list

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-delete,post-delete
    helm.sh/hook-delete-policy: before-hook-creation
  name: portworx-hook
  namespace: portworx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: portworx-hook
subjects:
- kind: ServiceAccount
  name: portworx-hook
  namespace: kube-system

---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: portworx
  name: portworx-service
  namespace: kube-system
spec:
  ports:
  - name: px-api
    port: 9001
    protocol: TCP
    targetPort: 9001
  - name: px-kvdb
    port: 9019
    protocol: TCP
    targetPort: 9019
  - name: px-sdk
    port: 9021
    protocol: TCP
    targetPort: 9021
  selector:
    name: portworx
  type: NodePort

---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  annotations:
    portworx.com/helm-vars: chart="portworx-1.0.0",AKSorEKSInstall="true",clusterName="mycluster",consul="map[token:none]",dataInterface="none",deploymentType="oci",drives="none",env="[map[name:PX_TEMPLATE_VERSION
      value:v2] map[name:AZURE_CLIENT_SECRET valueFrom:map[secretKeyRef:map[key:AZURE_CLIENT_SECRET
      name:px-azure]]] map[name:AZURE_CLIENT_ID valueFrom:map[secretKeyRef:map[key:AZURE_CLIENT_ID
      name:px-azure]]] map[name:AZURE_TENANT_ID valueFrom:map[secretKeyRef:map[key:AZURE_TENANT_ID
      name:px-azure]]]]",envVars="API_SERVER=http://lighthouse-new.portworx.com;",etcd="map[ca:none
      cert:none certPath:none credentials:none:none key:none]",imageType="none",imageVersion="2.0.3.6",internalKVDB="true",lighthouse="true",lighthouseStorkConnectorVersion="0.2",lighthouseSyncVersion="0.4",lighthouseVersion="2.0.4",managementInterface="none",secretType="KVDB",serviceAccount="map[hook:map[create:true
      name:<nil>]]",stork="true",storkVersion="2.1.1"
    portworx.com/install-source: helm/Tiller-r0
  name: portworx
  namespace: kube-system
spec:
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app: portworx
        heritage: Tiller
        name: portworx
        release: portworx
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: px/enabled
                operator: NotIn
                values:
                - "false"
              - key: node-role.kubernetes.io/master
                operator: DoesNotExist
      containers:
      - args:
        - -a
        - -b
        - -c
        - mycluster
        - -secret_type
        - KVDB
        - -x
        - kubernetes
        env:
        - name: PX_TEMPLATE_VERSION
          value: v2
        - name: API_SERVER
          value: http://lighthouse-new.portworx.com
        - name: ""
          value: ""
        image: portworx/oci-monitor:2.0.3.6
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            host: 127.0.0.1
            path: /status
            port: 9001
          initialDelaySeconds: 840
          periodSeconds: 30
        name: portworx
        readinessProbe:
          httpGet:
            host: 127.0.0.1
            path: /health
            port: 9015
          periodSeconds: 10
        securityContext:
          privileged: true
        terminationMessagePath: /tmp/px-termination-log
        volumeMounts:
        - mountPath: /var/run/docker.sock
          name: dockersock
        - mountPath: /run/containerd
          name: containerdsock
        - mountPath: /etc/pwx
          name: etcpwx
        - mountPath: /var/cores
          name: cores
        - mountPath: /opt/pwx
          name: optpwx
        - mountPath: /etc/systemd/system
          name: sysdmount
        - mountPath: /var/run/log
          name: journalmount1
          readOnly: true
        - mountPath: /var/log
          name: journalmount2
          readOnly: true
        - mountPath: /var/run/dbus
          name: dbusmount
        - mountPath: /host_proc
          name: hostproc
      hostNetwork: true
      hostPID: true
      restartPolicy: Always
      serviceAccountName: px-account
      tolerations: null
      volumes:
      - hostPath:
          path: /var/run/docker.sock
        name: dockersock
      - hostPath:
          path: /run/containerd
        name: containerdsock
      - hostPath:
          path: /etc/pwx
        name: etcpwx
      - hostPath:
          path: /var/cores
        name: cores
      - hostPath:
          path: /opt/pwx
        name: optpwx
      - hostPath:
          path: /etc/systemd/system
        name: sysdmount
      - hostPath:
          path: /var/run/log
        name: journalmount1
      - hostPath:
          path: /var/log
        name: journalmount2
      - hostPath:
          path: /var/run/dbus
        name: dbusmount
      - hostPath:
          path: /proc
        name: hostproc
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate

---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-delete
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "-5"
  labels:
    app.kubernetes.io/instance: portworx
    app.kubernetes.io/managed-by: Tiller
    chart: portworx-1.0.0
    heritage: Tiller
    release: portworx
  name: px-hook-postdelete-unlabelnode
  namespace: kube-system
spec:
  backoffLimit: 0
  template:
    spec:
      containers:
      - args:
        - label
        - nodes
        - --all
        - px/enabled-
        image: lachlanevenson/k8s-kubectl:v1.9.0
        name: post-delete-job
      restartPolicy: Never
      serviceAccountName: portworx-hook

---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: pre-delete
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "-5"
  labels:
    app.kubernetes.io/instance: portworx
    app.kubernetes.io/managed-by: Tiller
    chart: portworx-1.0.0
    heritage: Tiller
    release: portworx
  name: px-hook-predelete-nodelabel
  namespace: kube-system
spec:
  backoffLimit: 0
  template:
    spec:
      containers:
      - args:
        - label
        - nodes
        - --all
        - px/enabled=remove
        - --overwrite
        image: lachlanevenson/k8s-kubectl:v1.9.0
        name: pre-delete-job
      restartPolicy: Never
      serviceAccountName: portworx-hook

---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "-5"
  labels:
    app.kubernetes.io/instance: portworx
    app.kubernetes.io/managed-by: Tiller
    chart: portworx-1.0.0
    heritage: Tiller
    release: portworx
  name: px-hook-etcd-preinstall
  namespace: kube-system
spec:
  backoffLimit: 0
  template:
    spec:
      containers:
      - args:
        - /usr/bin/etcdStatus.sh
        - ""
        command:
        - /bin/bash
        image: portworx/px-etcd-preinstall-hook:v1.2
        imagePullPolicy: Always
        name: pre-install-job
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Never

